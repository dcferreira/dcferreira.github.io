<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Daniel C Ferreira &lt;dcferreira></title><link>https://dcferreira.com/</link><atom:link href="https://dcferreira.com/index.xml" rel="self" type="application/rss+xml"/><description>Daniel C Ferreira &lt;dcferreira></description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 11 Dec 2022 00:00:00 +0000</lastBuildDate><image><url>https://dcferreira.com/media/icon_hu4876d3cb97a4ad0b3222b8f65edef0fe_436070_512x512_fill_lanczos_center_3.png</url><title>Daniel C Ferreira &lt;dcferreira></title><link>https://dcferreira.com/</link></image><item><title>Tweet Fake</title><link>https://dcferreira.com/project/tweetfake/</link><pubDate>Sun, 11 Dec 2022 00:00:00 +0000</pubDate><guid>https://dcferreira.com/project/tweetfake/</guid><description>&lt;p>This was a short project I did with a random team for a weekend-long Hackathon.
The idea was to take the most liked tweets for a specific user, and use a Large Language Model to generate new tweets in this user&amp;rsquo;s style.&lt;/p>
&lt;p>At the moment you can try it out at &lt;a href="https://tweetfake.dcferreira.com" target="_blank" rel="noopener">https://tweetfake.dcferreira.com&lt;/a> (need to be logged in to Twitter), although it&amp;rsquo;s not clear for how long this link will stay up.
There is also a short video in &lt;a href="https://devpost.com/software/tweet-fake" target="_blank" rel="noopener">the devpost project page&lt;/a>.&lt;/p></description></item><item><title>Infinity for Youtube</title><link>https://dcferreira.com/project/infinity-for-youtube/</link><pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate><guid>https://dcferreira.com/project/infinity-for-youtube/</guid><description>&lt;p>A simple browser extension that hides YouTube video length for user-selected channels.
Unlike other similar browser extensions, this one also hides the video length in video thumbnails.&lt;/p>
&lt;p>You can easily install it from the &lt;a href="https://chrome.google.com/webstore/detail/infinity-for-youtube/dikhofideaigolhecjcmfeifbchnebeo" target="_blank" rel="noopener">Chrome Web Store&lt;/a>.&lt;/p></description></item><item><title>Efficient UDFs on Databricks with unpickleable objects</title><link>https://dcferreira.com/post/2022-03-spark-serialization/</link><pubDate>Mon, 21 Mar 2022 17:30:00 +0000</pubDate><guid>https://dcferreira.com/post/2022-03-spark-serialization/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>I often run into a problem when writing UDFs on Databricks, where I need some to access some object that &lt;code>pickle&lt;/code> can&amp;rsquo;t serialize.
Often times this is just something that comes from some external library, and so fixing the code is not a practical solution.&lt;/p>
&lt;p>An easy solution to this is to initialize the object inside the UDF itself.
This avoids the need for serialization, but it introduces a new problem: the object is initialized for every run of the UDF, hitting performance.&lt;/p>
&lt;p>The solution that addresses these 2 problems is to cache the object initialization.
Then, each executor initializes the object only once.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>Here is a simple example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">lxml.etree&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">HTMLParser&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># `spark` is the spark context, on databricks it is a global variable that&amp;#39;s always available&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">spark&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">createDataFrame&lt;/span>&lt;span class="p">([{&lt;/span>&lt;span class="s2">&amp;#34;n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Slow&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">HTMLParser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.01&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">double&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">slow_global&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Slow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@udf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;int&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">f_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">slow_global&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">double&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When actually executing the UDF&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;n&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>we get the error&lt;/p>
&lt;pre tabindex="0">&lt;code>PicklingError: Could not serialize object: TypeError: can&amp;#39;t pickle lxml.etree.HTMLParser objects
&lt;/code>&lt;/pre>&lt;h2 id="naive-solution">Naive Solution&lt;/h2>
&lt;p>The naive solution is to initialize the object in each run of the UDF:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@udf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;int&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">slow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Slow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">slow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">double&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This works&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;n&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>but it&amp;rsquo;s very inefficient.&lt;/p>
&lt;p>On a cluster with 2 &lt;code>i3.xlarge&lt;/code> workers on AWS, executing this took me around 25 seconds.&lt;/p>
&lt;h2 id="optimized-solution">Optimized Solution&lt;/h2>
&lt;p>The solution is then to cache the object initialization.
For this, we need the &lt;a href="https://cachetools.readthedocs.io/" target="_blank" rel="noopener">&lt;code>cachetools&lt;/code>&lt;/a> library.
On Databricks, you can install it by running the following cell&lt;/p>
&lt;pre tabindex="0">&lt;code>%pip install cachetools
&lt;/code>&lt;/pre>&lt;div class="alert alert-note">
&lt;div>
We can&amp;rsquo;t use &lt;a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" target="_blank" rel="noopener">&lt;code>lru_cache&lt;/code>&lt;/a> from the standard library,
because it requires serialization.
Trying it gives us the error: &lt;code>PicklingError: Could not serialize object: AttributeError: 'functools._lru_cache_wrapper' object has no attribute '__bases__'&lt;/code>
&lt;/div>
&lt;/div>
&lt;p>Usage is very simple:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">cachetools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">cached&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@cached&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">get_slow&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Slow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@udf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;int&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">f_cached&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">slow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_slow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">slow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">double&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Executing it&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f_cached&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;n&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>took around 0.5 seconds, in the same cluster as above.&lt;/p></description></item><item><title>NTARC: A Data Model for the Systematic Review of Network Traffic Analysis Research</title><link>https://dcferreira.com/publication/ntarc/</link><pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate><guid>https://dcferreira.com/publication/ntarc/</guid><description/></item><item><title>DeepArchitect</title><link>https://dcferreira.com/project/deep-architect/</link><pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate><guid>https://dcferreira.com/project/deep-architect/</guid><description/></item><item><title>Towards modular and programmable architecture search</title><link>https://dcferreira.com/publication/deep-architect/</link><pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate><guid>https://dcferreira.com/publication/deep-architect/</guid><description/></item><item><title>MDCGen: Multidimensional dataset generator for clustering</title><link>https://dcferreira.com/publication/mdcgen/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate><guid>https://dcferreira.com/publication/mdcgen/</guid><description/></item><item><title>City-GAN: Learning architectural styles using a custom Conditional GAN architecture</title><link>https://dcferreira.com/publication/city-gan/</link><pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate><guid>https://dcferreira.com/publication/city-gan/</guid><description/></item><item><title>City-GAN</title><link>https://dcferreira.com/project/city-gan/</link><pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate><guid>https://dcferreira.com/project/city-gan/</guid><description>&lt;p>Generative Adversarial Networks (GANs) are a well-known technique that is trained on samples (e.g. pictures
of fruits) and which after training is able to generate realistic new samples. Conditional GANs (CGANs)
additionally provide label information for subclasses (e.g. apple, orange, pear) which enables the GAN to learn
more easily and increase the quality of its output samples. We use GANs to learn architectural features of
major cities and to generate images of buildings which do not exist. We show that currently available GAN
and CGAN architectures are unsuited for this task and propose a custom architecture and demonstrate that
our architecture has superior performance for this task and verify its capabilities with extensive experiments.&lt;/p></description></item><item><title>Extreme Dimensionality Reduction for Network Attack Visualization with Autoencoders</title><link>https://dcferreira.com/publication/feature-reduction/</link><pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate><guid>https://dcferreira.com/publication/feature-reduction/</guid><description/></item><item><title>Traffic Flow Mapper</title><link>https://dcferreira.com/project/tfm/</link><pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate><guid>https://dcferreira.com/project/tfm/</guid><description/></item><item><title>MDCGenPy</title><link>https://dcferreira.com/project/mdcgenpy/</link><pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate><guid>https://dcferreira.com/project/mdcgenpy/</guid><description/></item><item><title>A meta-analysis approach for feature selection in network traffic research</title><link>https://dcferreira.com/publication/ntarc-features/</link><pubDate>Mon, 07 Aug 2017 00:00:00 +0000</pubDate><guid>https://dcferreira.com/publication/ntarc-features/</guid><description/></item><item><title>NTARC Database</title><link>https://dcferreira.com/project/ntarc/</link><pubDate>Mon, 07 Aug 2017 00:00:00 +0000</pubDate><guid>https://dcferreira.com/project/ntarc/</guid><description/></item><item><title>Jointly Learning to Embed and Predict with Multiple Languages</title><link>https://dcferreira.com/publication/multilingual/</link><pubDate>Sun, 07 Aug 2016 00:00:00 +0000</pubDate><guid>https://dcferreira.com/publication/multilingual/</guid><description/></item><item><title>Multilingual Embeddings</title><link>https://dcferreira.com/project/multilingual-embeddings/</link><pubDate>Sun, 07 Aug 2016 00:00:00 +0000</pubDate><guid>https://dcferreira.com/project/multilingual-embeddings/</guid><description/></item></channel></rss>